{"ast":null,"code":"import { saveSubscription } from './api';\nconst PUBLIC_VAPID_KEY = process.env.REACT_APP_VAPID_PUBLIC; // set in .env\n\nfunction urlBase64ToUint8Array(base64String) {\n  const padding = '='.repeat((4 - base64String.length % 4) % 4);\n  const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/'); // ✅ removed unnecessary escape\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\nexport async function subscribeUser(userEmail) {\n  if (!('serviceWorker' in navigator) || !('PushManager' in window)) return null;\n  try {\n    const registration = await navigator.serviceWorker.ready;\n    const subscription = await registration.pushManager.subscribe({\n      userVisibleOnly: true,\n      applicationServerKey: urlBase64ToUint8Array(PUBLIC_VAPID_KEY)\n    });\n\n    // send subscription to backend\n    await saveSubscription(subscription, userEmail);\n    return subscription;\n  } catch (err) {\n    console.error('Subscription failed', err);\n    return null;\n  }\n}","map":{"version":3,"names":["saveSubscription","PUBLIC_VAPID_KEY","process","env","REACT_APP_VAPID_PUBLIC","urlBase64ToUint8Array","base64String","padding","repeat","length","base64","replace","rawData","window","atob","outputArray","Uint8Array","i","charCodeAt","subscribeUser","userEmail","navigator","registration","serviceWorker","ready","subscription","pushManager","subscribe","userVisibleOnly","applicationServerKey","err","console","error"],"sources":["F:/Remainder_ai/frontend/src/push.js"],"sourcesContent":["import { saveSubscription } from './api';\r\n\r\nconst PUBLIC_VAPID_KEY = process.env.REACT_APP_VAPID_PUBLIC; // set in .env\r\n\r\nfunction urlBase64ToUint8Array(base64String) {\r\n  const padding = '='.repeat((4 - base64String.length % 4) % 4);\r\n  const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/'); // ✅ removed unnecessary escape\r\n  const rawData = window.atob(base64);\r\n  const outputArray = new Uint8Array(rawData.length);\r\n  for (let i = 0; i < rawData.length; ++i) {\r\n    outputArray[i] = rawData.charCodeAt(i);\r\n  }\r\n  return outputArray;\r\n}\r\n\r\nexport async function subscribeUser(userEmail) {\r\n  if (!('serviceWorker' in navigator) || !('PushManager' in window)) return null;\r\n\r\n  try {\r\n    const registration = await navigator.serviceWorker.ready;\r\n    const subscription = await registration.pushManager.subscribe({\r\n      userVisibleOnly: true,\r\n      applicationServerKey: urlBase64ToUint8Array(PUBLIC_VAPID_KEY)\r\n    });\r\n\r\n    // send subscription to backend\r\n    await saveSubscription(subscription, userEmail);\r\n    return subscription;\r\n  } catch (err) {\r\n    console.error('Subscription failed', err);\r\n    return null;\r\n  }\r\n}\r\n"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,OAAO;AAExC,MAAMC,gBAAgB,GAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB,CAAC,CAAC;;AAE7D,SAASC,qBAAqBA,CAACC,YAAY,EAAE;EAC3C,MAAMC,OAAO,GAAG,GAAG,CAACC,MAAM,CAAC,CAAC,CAAC,GAAGF,YAAY,CAACG,MAAM,GAAG,CAAC,IAAI,CAAC,CAAC;EAC7D,MAAMC,MAAM,GAAG,CAACJ,YAAY,GAAGC,OAAO,EAAEI,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC;EAC/E,MAAMC,OAAO,GAAGC,MAAM,CAACC,IAAI,CAACJ,MAAM,CAAC;EACnC,MAAMK,WAAW,GAAG,IAAIC,UAAU,CAACJ,OAAO,CAACH,MAAM,CAAC;EAClD,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,OAAO,CAACH,MAAM,EAAE,EAAEQ,CAAC,EAAE;IACvCF,WAAW,CAACE,CAAC,CAAC,GAAGL,OAAO,CAACM,UAAU,CAACD,CAAC,CAAC;EACxC;EACA,OAAOF,WAAW;AACpB;AAEA,OAAO,eAAeI,aAAaA,CAACC,SAAS,EAAE;EAC7C,IAAI,EAAE,eAAe,IAAIC,SAAS,CAAC,IAAI,EAAE,aAAa,IAAIR,MAAM,CAAC,EAAE,OAAO,IAAI;EAE9E,IAAI;IACF,MAAMS,YAAY,GAAG,MAAMD,SAAS,CAACE,aAAa,CAACC,KAAK;IACxD,MAAMC,YAAY,GAAG,MAAMH,YAAY,CAACI,WAAW,CAACC,SAAS,CAAC;MAC5DC,eAAe,EAAE,IAAI;MACrBC,oBAAoB,EAAExB,qBAAqB,CAACJ,gBAAgB;IAC9D,CAAC,CAAC;;IAEF;IACA,MAAMD,gBAAgB,CAACyB,YAAY,EAAEL,SAAS,CAAC;IAC/C,OAAOK,YAAY;EACrB,CAAC,CAAC,OAAOK,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAAC,qBAAqB,EAAEF,GAAG,CAAC;IACzC,OAAO,IAAI;EACb;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}