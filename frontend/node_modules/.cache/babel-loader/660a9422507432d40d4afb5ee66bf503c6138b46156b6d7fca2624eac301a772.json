{"ast":null,"code":"var _jsxFileName = \"F:\\\\Remainder_ai\\\\frontend\\\\src\\\\index.js\";\nimport React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { GoogleOAuthProvider } from '@react-oauth/google';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst container = document.getElementById('root');\nconst root = createRoot(container);\nconst clientId = process.env.REACT_APP_GOOGLE_CLIENT_ID;\nif (clientId) {\n  root.render(/*#__PURE__*/_jsxDEV(GoogleOAuthProvider, {\n    clientId: clientId,\n    children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this));\n} else {\n  // Google OAuth provider requires a clientId; render app without Google login if missing\n  // This allows the rest of the app to work while logging a helpful warning for setup\n  // Configure a .env file in the frontend with REACT_APP_GOOGLE_CLIENT_ID\n  // and restart the dev server for changes to take effect.\n  // eslint-disable-next-line no-console\n  console.warn('REACT_APP_GOOGLE_CLIENT_ID is not set. Google Login will be disabled.');\n  root.render(/*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 15\n  }, this));\n}\n\n// register service worker to receive push when possible\nserviceWorkerRegistration.register();","map":{"version":3,"names":["React","createRoot","GoogleOAuthProvider","App","serviceWorkerRegistration","jsxDEV","_jsxDEV","container","document","getElementById","root","clientId","process","env","REACT_APP_GOOGLE_CLIENT_ID","render","children","fileName","_jsxFileName","lineNumber","columnNumber","console","warn","register"],"sources":["F:/Remainder_ai/frontend/src/index.js"],"sourcesContent":["import React from 'react';\r\nimport { createRoot } from 'react-dom/client';\r\nimport { GoogleOAuthProvider } from '@react-oauth/google';\r\nimport App from './App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\n\r\nconst container = document.getElementById('root');\r\nconst root = createRoot(container);\r\n\r\nconst clientId = process.env.REACT_APP_GOOGLE_CLIENT_ID;\r\n\r\nif (clientId) {\r\n  root.render(\r\n    <GoogleOAuthProvider clientId={clientId}>\r\n      <App />\r\n    </GoogleOAuthProvider>\r\n  );\r\n} else {\r\n  // Google OAuth provider requires a clientId; render app without Google login if missing\r\n  // This allows the rest of the app to work while logging a helpful warning for setup\r\n  // Configure a .env file in the frontend with REACT_APP_GOOGLE_CLIENT_ID\r\n  // and restart the dev server for changes to take effect.\r\n  // eslint-disable-next-line no-console\r\n  console.warn('REACT_APP_GOOGLE_CLIENT_ID is not set. Google Login will be disabled.');\r\n  root.render(<App />);\r\n}\r\n\r\n// register service worker to receive push when possible\r\nserviceWorkerRegistration.register();\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,UAAU,QAAQ,kBAAkB;AAC7C,SAASC,mBAAmB,QAAQ,qBAAqB;AACzD,OAAOC,GAAG,MAAM,OAAO;AACvB,OAAO,KAAKC,yBAAyB,MAAM,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzE,MAAMC,SAAS,GAAGC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC;AACjD,MAAMC,IAAI,GAAGT,UAAU,CAACM,SAAS,CAAC;AAElC,MAAMI,QAAQ,GAAGC,OAAO,CAACC,GAAG,CAACC,0BAA0B;AAEvD,IAAIH,QAAQ,EAAE;EACZD,IAAI,CAACK,MAAM,cACTT,OAAA,CAACJ,mBAAmB;IAACS,QAAQ,EAAEA,QAAS;IAAAK,QAAA,eACtCV,OAAA,CAACH,GAAG;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CACvB,CAAC;AACH,CAAC,MAAM;EACL;EACA;EACA;EACA;EACA;EACAC,OAAO,CAACC,IAAI,CAAC,uEAAuE,CAAC;EACrFZ,IAAI,CAACK,MAAM,cAACT,OAAA,CAACH,GAAG;IAAAc,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC,CAAC;AACtB;;AAEA;AACAhB,yBAAyB,CAACmB,QAAQ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}